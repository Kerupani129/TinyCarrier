#include "user32.as"
#include "kernel32.as"

#uselib "psapi.dll"
#func global EnumProcessModules "EnumProcessModules" sptr, sptr, sptr, sptr
#func global GetModuleFileNameEx "GetModuleFileNameExA" sptr, sptr, sptr, sptr

#include "mod_clbk2.hsp"

// コンパイル設定
#runtime "hsp3cl"

// 定数
#define NULL  0
#define FALSE 0
#define TRUE  1

#define _MAX_PATH 260

#define GWL_STYLE   -16
#define GWL_EXSTYLE -20
#define GW_OWNER    0x00000004

#define WS_VISIBLE                0x10000000
#define WS_EX_TOOLWINDOW          0x00000080
#define WS_EX_NOREDIRECTIONBITMAP 0x00200000

#define PROCESS_VM_READ           0x0010
#define PROCESS_QUERY_INFORMATION 0x0400

#define MONITOR_DEFAULTTOPRIMARY 0x00000001

// 
// メイン
// 
	
	labelptr clbk, 2, *ew
	EnumWindows stat, 0

	mes "\n取得数 : " + i + "\n"

	stop

// 
// ウィンドウハンドル取得時のコールバック関数
// 
*ew
	
	// 引数
	labelargv argv
	
	arg_hWnd   = argv(0)
	arg_lParam = argv(1)
	
	
	// いらないものをはじく
	/* ウィンドウスタイル・拡張スタイルを取得 */
	GetWindowLong arg_hWnd, GWL_STYLE
	style = stat
    GetWindowLong arg_hWnd, GWL_EXSTYLE
    exStyle = stat
	
	/* 可視状態かどうか */
    if (0 == (style & WS_VISIBLE)) : return 1
    if (0 != (exStyle & WS_EX_NOREDIRECTIONBITMAP)) : return 1
    
    /* タスクバーに表示されているかどうか */
    if (0 != (exStyle & WS_EX_TOOLWINDOW)) : return 1
    
	/* オーナーウィンドウを持つかどうか */
	GetWindow arg_hWnd, GW_OWNER
	if (NULL != stat) : return 1
	
    
	// タイトル取得
	GetWindowTextLength arg_hWnd
	len = stat
	sdim text, len + 1
	GetWindowText arg_hWnd, varptr(text), len + 1


	// ファイルパス取得
	/* プロセス ID 取得 */
	processID = NULL
	GetWindowThreadProcessId arg_hWnd, varptr(processID)

	/* プロセスを開く */
	OpenProcess PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processID
	hProcess = stat

	/* モジュールハンドル 取得 */
	hModule = NULL
	EnumProcessModules hProcess, varptr(hModule), 4, NULL

	/* ファイルパス 取得 */
	sdim path, _MAX_PATH
	GetModuleFileNameEx hProcess, hModule, varptr(path), _MAX_PATH
	
	/* プロセスを閉じる */
	CloseHandle hProcess


	// ウィンドウの状態取得
	IsIconic arg_hWnd
	fIconic = stat
	IsZoomed arg_hWnd
	fZoomed = stat
	IsWindowVisible arg_hWnd
	fWindowVisible = stat
	IsWindowEnabled arg_hWnd
	fWindowEnabled = stat
	
	
	// ウィンドウの位置・サイズ取得
	/* ワークエリア内での座標 */
	dim wndPl, 11 // WINDOWPLACEMENT 構造体
	wndPl.0 = 4 * 11                                         // wndPl.length = sizeof(WINDOWPLACEMENT)
	GetWindowPlacement arg_hWnd, varptr(wndPl)
	ptNormalPosition = wndPl.7, wndPl.8                      // ptNormalPosition = wndPl.rcNormalPosition.left, wndPl.rcNormalPosition.top
	ptNormalSize     = wndPl.9 - wndPl.7, wndPl.10 - wndPl.8 // ptNormalSize     = wndPl.rcNormalPosition.right - wndPl.rcNormalPosition.left, wndPl.rcNormalPosition.bottom - wndPl.rcNormalPosition.top
	
	/* 位置の補正 */
	dim mi, 10 // MONITORINFO 構造体
	mi.0 = 10 * 4                     // mi.cbSize = sizeof(MONITORINFO)
	MonitorFromWindow arg_hWnd, MONITOR_DEFAULTTOPRIMARY
	GetMonitorInfo stat, varptr(mi)
	ptNormalPosition.0 += mi.5 - mi.1 // ptNormalPosition.x += mi.rcWork.left - mi.rcMonitor.left
	ptNormalPosition.1 += mi.6 - mi.2 // ptNormalPosition.y += mi.rcWork.top  - mi.rcMonitor.top


	// 表示
	mes "hWnd : " + arg_hWnd
	mes "text : " + text
	mes "path : " + path
	mes "IsIconic : " + fIconic
	mes "IsZoomed : " + fZoomed
	mes "IsWindowVisible : " + fWindowVisible
	mes "IsWindowEnabled : " + fWindowEnabled
	mes "ptNormalPosition : (" + ptNormalPosition.0 + ", " + ptNormalPosition.1 + ")"
	mes "ptNormalSize     : (" + ptNormalSize.0 + ", " + ptNormalSize.1 + ")"
	mes


	// カウント
	i++


	return 1
